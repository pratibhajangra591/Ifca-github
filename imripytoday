{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bf1213de-7e9e-476e-903e-7c956f913937",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import imripy\n",
    "from imripy import merger_system as ms\n",
    "from scipy.interpolate import interp1d\n",
    "from matplotlib.ticker import FormatStrFormatter\n",
    "from scipy.optimize import curve_fit\n",
    "from numpy import diff\n",
    "\n",
    "π = np.pi\n",
    "G = 4.4959e-15            #in units of M☉^-1 pc^3 yr^-2\n",
    "c = 0.3068                #in units of pc yr^-1\n",
    "ρ_eq = 3.1812e3           #in units of M☉ pc^-3 with ρ_eq=2.15368e-16 kg m^-3\n",
    "t_m = 13.78e9             #in units of yrs corresponding to t_0=13.78Gyr\n",
    "yr = 3.154e7              # in units of seconds\n",
    "t_eq = 1.59246e12/yr      # in units of yr\n",
    "M_solar = 1.989e30\n",
    "\n",
    "\n",
    "# Definition of the binary system \n",
    "m_bar = 1\n",
    "m1 =  m_bar * ms.solar_mass_to_pc   # The central mass m1 with a mass of 1 solar masses, converted to pc\n",
    "\n",
    "\n",
    "m2 = 1e-3 * ms.solar_mass_to_pc   # The secondary mass of 1e-3 solar mass converted to pc\n",
    "\n",
    "D_luminosity = 5e8              # The distance to the system from earth as 500 Mpc\n",
    "\n",
    "\n",
    "\n",
    "ρ_bar = (ρ_eq/2) * (t_eq**(3/2)) * ((2 * G * m_bar)**(3/4))\n",
    "\n",
    "\n",
    "\n",
    "# Dark matter spike with alpha=9/4 for Primordial black holes case\n",
    "r_spike = 1  # in parsecs, Choosen by choice\n",
    "\n",
    "alpha = 9/4\n",
    "\n",
    "rho_spike =  ρ_bar * (r_spike**(-alpha)) * ms.solar_mass_to_pc  # This takes the value of M_sun/pc^3 and converts it to 1/pc^2\n",
    "\n",
    "spike = imripy.halo.Spike(rho_spike, r_spike, alpha)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Plot density\n",
    "r_grid = np.geomspace(1e-8, 1e3, 100)  # creates a grid in pc\n",
    "plt.loglog(r_grid, spike.density(r_grid), 'g')\n",
    "plt.grid()\n",
    "plt.xlabel(\"radius / pc\")\n",
    "plt.ylabel(\"density / 1/pc$^2$\")\n",
    "plt.title('DM Spike Density')\n",
    "plt.savefig('spike density.pdf')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "803085f6-1475-4665-a3f8-69948b58573e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dy= 0.6931471805599454\n",
      "m = [1.00000000e-03 1.74286795e-01 3.47573590e-01 5.20860385e-01\n",
      " 6.94147181e-01 8.67433976e-01 1.04072077e+00 1.21400757e+00\n",
      " 1.38729436e+00 1.56058116e+00 1.73386795e+00 1.90715475e+00\n",
      " 2.08044154e+00 2.25372834e+00 2.42701513e+00 2.60030193e+00\n",
      " 2.77358872e+00 2.94687552e+00 3.12016231e+00 3.29344911e+00] M_solar\n",
      "Δ = [ 0.70781424  0.84173773  1.0010005   1.19039692  1.41562848  1.68347546\n",
      "  2.002001    2.38079383  2.83125697  3.36695093  4.004002    4.76158767\n",
      "  5.66251393  6.73390186  8.008004    9.52317534 11.32502787 13.46780372\n",
      " 16.016008   19.04635067]\n"
     ]
    }
   ],
   "source": [
    "m_1 = 1e-3   #in units of M☉\n",
    "m_2 = 2*m_1   #in units of M☉\n",
    "\n",
    "y_1 = np.log(m_1)\n",
    "y_2 = np.log(m_2)\n",
    "dy  = (y_2 - y_1)\n",
    "\n",
    "print(\"dy=\",dy)\n",
    "\n",
    "y_list = np.zeros(20)\n",
    "m_1_list = np.zeros(len(y_list))\n",
    "m_2_list = np.zeros(len(y_list))\n",
    "\n",
    "\n",
    "for i in range(len(y_list)):\n",
    "    m_1_list[i] = m_2_list[i] = (m_1 + ((i/4)*dy))\n",
    "    \n",
    "print(\"m =\", m_2_list, \"M_solar\")\n",
    "\n",
    "\n",
    "Δ_1_list = np.zeros(len(y_list))\n",
    "Δ_2_list = np.zeros(len(y_list))\n",
    "\n",
    "for i, m_1 in enumerate(m_1_list):\n",
    "    Δ_1_list[i] =  Δ_2_list[i] = np.exp(m_1 + 0.5*dy) - np.exp(m_1 - 0.5*dy)\n",
    "     \n",
    "print(\"Δ =\", Δ_1_list)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "def a(m_1,m_2,Δ_1,Δ_2):\n",
    "    \n",
    "    f_pbh = 4.3e-3\n",
    "    f = 0.85 * f_pbh\n",
    "        \n",
    "          \n",
    "    def P(m): #Powerlaw PBH mass distribution\n",
    "        α = 2.6\n",
    "        M = 1e-4     #in units of M☉\n",
    "        return ((α-1)/M) * ((m/M)**(-α))\n",
    "\n",
    "    \n",
    "    def f_(m):\n",
    "        return f*P(m)\n",
    "    \n",
    "    def f_b(m_1,m_2):\n",
    "        return  f_(m_1)+f_(m_2)\n",
    "    \n",
    "    def x̄(m_1,m_2,Δ_1,Δ_2):\n",
    "        return (((3*(m_1+m_2))/(8*π*ρ_eq*f_b(m_1,m_2)*np.sqrt(Δ_1*Δ_2)))**(1/3))\n",
    "   \n",
    "    def λ(m_1,m_2,Δ_1,Δ_2):\n",
    "        return (8*π*ρ_eq*(x̄(m_1,m_2,Δ_1,Δ_2)**3))/(3*(m_1 + m_2))\n",
    "\n",
    "    \n",
    "    return ( 0.0977*λ(m_1,m_2,Δ_1,Δ_2) + 0.0057*(λ(m_1,m_2,Δ_1,Δ_2)**2) ) * x̄(m_1,m_2,Δ_1,Δ_2)\n",
    "\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "13c7a319-6e49-47f4-a714-a4bea1b6f5cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a_i = 0.055001117908121726\n",
      "a0 = 191917392308.85043\n"
     ]
    }
   ],
   "source": [
    "def r_isko(m):\n",
    "    return (6*G*m)/(c**2)\n",
    "\n",
    "\n",
    "print(\"a_i =\", a(m_1_list[2], m_2_list[0], Δ_1_list[2], Δ_2_list[0])) \n",
    "\n",
    "\n",
    "print(\"a0 =\", a(m_1_list[2], m_2_list[0], Δ_1_list[2], Δ_2_list[0])/r_isko(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c57f8185-6506-4165-af4c-eb83ac99449d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evolving from  5.500111790812173  to  1.0 r_isco  with initial eccentricity 0.7  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.4489s\n",
      "Evolving from  5.500111790812173  to  1.0 r_isco  with initial eccentricity 0.5  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.3390s\n",
      "Evolving from  5.500111790812173  to  1.0 r_isco  with initial eccentricity 0.3  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.2955s\n",
      "Evolving from  30.250614849466956  to  1.0 r_isco  with initial eccentricity 0.7  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.6312s\n",
      "Evolving from  30.250614849466956  to  1.0 r_isco  with initial eccentricity 0.5  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.5800s\n",
      "Evolving from  30.250614849466956  to  1.0 r_isco  with initial eccentricity 0.3  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.5524s\n",
      "Evolving from  55.00111790812173  to  1.0 r_isco  with initial eccentricity 0.7  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.6934s\n",
      "Evolving from  55.00111790812173  to  1.0 r_isco  with initial eccentricity 0.5  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.6602s\n",
      "Evolving from  55.00111790812173  to  1.0 r_isco  with initial eccentricity 0.3  with  Options: accretion = False, haloPhaseSpaceDescription = False, accuracy = 1.0e-08\n",
      "A termination event occurred.\n",
      " -> Evolution took 0.6154s\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sp = ms.SystemProp(m1, m2, spike, D_luminosity)   # Create the SystemProp object describing the IMRI system\n",
    "\n",
    "# Setting initial and final conditions of the binary evolution for an eccentric orbit\n",
    "\n",
    "a0_array = np.linspace(100*a(m_1_list[2],m_2_list[0],Δ_1_list[2],Δ_2_list[0]), 1e3*a(m_1_list[2],m_2_list[0],Δ_1_list[2],Δ_2_list[0]), 3)\n",
    "\n",
    "e0_array = np.linspace(0.7, 0.3, 3) \n",
    "\n",
    "a0_list = a0_array.tolist()            \n",
    "\n",
    "e0_list = e0_array.tolist()\n",
    "\n",
    "\n",
    "a_fin = sp.r_isco()      # Choosen equal to r_icso\n",
    "\n",
    "R_fin = sp.r_isco()      # The final condition for the evolution\n",
    "\n",
    "\n",
    "\n",
    "plt.figure(figsize = (10, 5))\n",
    "t_m_list = np.zeros(len(e0_list))\n",
    "j_i_list = np.zeros(len(e0_list))\n",
    "\n",
    "\n",
    "for i, a0 in enumerate (a0_list):\n",
    "    for k, e0 in enumerate (e0_list):\n",
    "        a0 = a0_list[i] * sp.r_isco()\n",
    "        e_0 = e0_list[k] \n",
    "        j_i_list[k] = np.sqrt(1 - (e0**2))\n",
    "        ev_ecc = imripy.inspiral.Classic.Evolve(sp, a0 , e_0,  a_fin = R_fin)\n",
    "        t_m_list[k] = ev_ecc.t[-1]/ms.year_to_pc\n",
    "    plt.loglog(j_i_list, t_m_list, '--o')\n",
    "    \n",
    "    \n",
    "    \n",
    "plt.legend([ '%0.1f'% a0_list[0], '%0.1f'% a0_list[1], '%0.1f'% a0_list[2] ], \n",
    "           title= '$a_{i} \\hspace{0.2} [r_{isco}]$', \n",
    "            title_fontsize = 12, loc = 'lower right', prop = {\"size\":8})\n",
    "plt.xlabel('$j_{i}$', fontsize = 13)\n",
    "plt.ylabel('final merger time / yr', fontsize = 12)\n",
    "plt.title('t_m vs j_i for m_1 = 1 M☉ and m_2 = 10^-3 M☉ with halos')\n",
    "plt.savefig(' t_m vs j_i.pdf')\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fd58b49-5c01-4fc3-b88b-1c09e356fbb9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
